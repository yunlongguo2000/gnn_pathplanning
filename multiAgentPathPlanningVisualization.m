function multiAgentPathPlanningVisualization()
    % Load data generated by DataGen_Transformer.py
    data = load('data\data\map20x20_density_p1\10_Agent\train\train_IDMap00000_IDCase00001_MP26.mat');
    map = data.map;
    makespan = data.makespan;
    inputState = data.inputState;
    target = data.target;
    goal = data.goal;

    % Number of time steps
    numTimeSteps = makespan;

    % Number of agents
    numAgents = size(goal, 1);

    % Initialize figure
    figure;

    % Adjust the axes limits and aspect ratio
    ax = axes('Units', 'normalized', 'Position', [0.05, 0.1, 0.7, 0.8]);
    axis([0 size(map, 1) 0 size(map, 2)]);
    % set(ax, 'YDir','reverse'); % Make (0,0) at the bottom left
    axis square;

    % Create start and pause buttons
    startPos = [0.8, 0.6, 0.1, 0.05];  % Position for start button
    pausePos = [0.8, 0.5, 0.1, 0.05];  % Position for pause button
    startButton = uicontrol('Style', 'pushbutton', 'String', 'Start',...
                            'Units', 'normalized', 'Position', startPos, 'Callback', @startCallback);
    pauseButton = uicontrol('Style', 'pushbutton', 'String', 'Pause',...
                            'Units', 'normalized', 'Position', pausePos, 'Callback', @pauseCallback);

    % Initialize animation control variables
    running = true;
    paused = false;

    % Define callbacks
    function startCallback(src, event)
        running = true;
        paused = false;
    end

    function pauseCallback(src, event)
        paused = ~paused;
    end

    % Display the map as a grid
    % Assuming obstacle cells in 'map' are marked with 1
    obstacleColor = [0 0 0];  % Black color for obstacles
    cmap = [1 1 1; obstacleColor];  % White for free space, black for obstacles
    colormap(cmap);
    hMap = imagesc(map);
    axis square;  % Make the plot square

    % Drawing grid lines
    [gridRows, gridCols] = size(map);
    hold on;
    for row = 1:gridRows
        plot([0.5, gridCols + 0.5], [row - 0.5, row - 0.5], 'k');
    end
    for col = 1:gridCols
        plot([col - 0.5, col - 0.5], [0.5, gridRows + 0.5], 'k');
    end

    % Plot initial positions of agents
    hAgents = gobjects(1, numAgents);
    for i = 1:numAgents
        hAgents(i) = plot(inputState(1, i, 1), inputState(1, i, 2), 'o');
    end

    % Plot goals
    for i = 1:numAgents
        plot(goal(i, 1), goal(i, 2), 'x');
    end

    % Update agents' positions in each time step
    for t = 1:numTimeSteps
        if ~running
            break;
        end

        while paused
            pause(0.1);
        end

        for i = 1:numAgents
            % Update position based on target
            % Placeholder for movement logic
            newPosition = [inputState(t, i, 1), inputState(t, i, 2)];

            % Update the position of agent 'i' at time 't'
            set(hAgents(i), 'XData', newPosition(1), 'YData', newPosition(2));
        end

        drawnow;  % Update the figure
        pause(0.5);  % Pause for a brief moment to create an animation effect
    end
end
